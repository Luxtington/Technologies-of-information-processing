        /*House h1 = new House(2);
        System.out.println(h1);*/

        /*City cityA = new City("A"), cityB = new City("B"), cityC = new City("C");
        City cityD = new City("D"), cityE = new City("E"), cityF = new City("F");

        List<City> allCities = new ArrayList<City>();
        allCities.add(cityA);
        allCities.add(cityB);
        allCities.add(cityC);
        allCities.add(cityD);
        allCities.add(cityE);
        allCities.add(cityF);

        Way wayA1 = new Way(cityB, 5), wayA2 = new Way(cityD, 6), wayA3 = new Way(cityF, 1);
        Way wayB1 = new Way(cityA, 5), wayB2 = new Way(cityC, 3);
        Way wayC1 = new Way(cityB, 3), wayC2 = new Way(cityD, 4);
        Way wayD1 = new Way(cityA, 6), wayD2 = new Way(cityC, 4), wayD3 = new Way(cityE, 2);
        Way wayE1 = new Way(cityF, 2);
        Way wayF1 = new Way(cityB, 1), wayF2 = new Way(cityE, 2);
        //Way wayAExc = new Way(cityB, 7);

        List<Way> aAllAWays = new ArrayList<Way>();

        aAllAWays.add(wayA1);
        aAllAWays.add(wayA2);
        aAllAWays.add(wayA3);
        //aAllAWays.add(new Way(cityF, 7)); //exc - попытка добавления второго пути из одного и того же города

        List<Way> bAllAWays = new ArrayList<Way>();
        bAllAWays.add(wayB1);
        bAllAWays.add(wayB2);
        //aAllAWays.add(wayAExc); // уберем А1, оставив В1, при добавлении пути А1 с другой ценой - ошибка

        List<Way> cAllAWays = new ArrayList<Way>();
        cAllAWays.add(wayC1);
        cAllAWays.add(wayC2);

        List<Way> dAllAWays = new ArrayList<Way>();
        dAllAWays.add(wayD1);
        dAllAWays.add(wayD2);
        dAllAWays.add(wayD3);

        List<Way> eAllAWays = new ArrayList<Way>();
        eAllAWays.add(wayE1);

        List<Way> fAllAWays = new ArrayList<Way>();
        fAllAWays.add(wayF1);
        fAllAWays.add(wayF2);

        List<List<Way>> allWays = new ArrayList<List<Way>>();
        allWays.add(aAllAWays);
        allWays.add(bAllAWays);
        allWays.add(cAllAWays);
        allWays.add(dAllAWays);
        allWays.add(eAllAWays);
        allWays.add(fAllAWays);

        for (int i = 0; i < City.getCityNumber(); i++) // устанавливаем наборы путей городам
        {
            allCities.get(i).setWays(allWays.get(i));
            System.out.println(allCities.get(i));
        }

        cityA.removeWay(wayA1);
        //cityA.removeWay(cityB);
        System.out.println("---------");

        for (int i = 0; i < City.getCityNumber(); i++) // устанавливаем наборы путей городам
        {
            System.out.println(allCities.get(i));
        }
        System.out.println("---------");

        Way waySC1 = new Way(cityB,5), waySC2 = new Way(cityC,7), waySC3 = new Way(cityE,10);
        SmartCity cityS = new SmartCity("S", new ArrayList<>(Arrays.asList(waySC1, waySC2, waySC3)));
        //SmartCity cityS = new SmartCity("S");
        //cityS.addWays(new ArrayList<>(Arrays.asList(waySC1, waySC2, waySC3)));
        allCities.add(cityS);
        for (int i = 0; i < City.getCityNumber(); i++)
        {
            System.out.println(allCities.get(i));
        }*/

        City cityA = new SmartCity("A"), cityB = new City("B"), cityC = new City("C");
        City cityD = new SmartCity("D"), cityE = new City("E");

        List<City> allCities = new ArrayList<City>(Arrays.asList(cityA, cityB, cityC, cityD, cityE));

        Way wayA1 = new Way(cityB, 5), wayA2 = new Way(cityC, 6);
        Way wayB1 = new Way(cityC, 9);
        //Way c isn't necessary because of a smart city A
        Way wayD1 = new Way(cityB, 1), wayD2 = new Way(cityE, 4);
        Way wayE1 = new Way(cityC, 2);

        List<Way> aAllAWays = new ArrayList<Way>(Arrays.asList(wayA1, wayA2));
        List<Way> bAllAWays = new ArrayList<Way>(Arrays.asList(wayB1));
        List<Way> dAllAWays = new ArrayList<Way>(Arrays.asList(wayD1, wayD2));
        List<Way> eAllAWays = new ArrayList<Way>(Arrays.asList(wayE1));

        cityA.addWays(aAllAWays);
        cityB.addWays(bAllAWays);
        cityD.addWays(dAllAWays);
        cityE.addWays(eAllAWays);

        for (int i=0; i < allCities.size(); i++)
            System.out.println(allCities.get(i));


        --------------------------------------------(equals() in City)
                /*City cityB = new City("B"), cityC = new City("C"), cityD = new City("D"), cityE = new City("E");

                City cityF = new City("F", new ArrayList<>(Arrays.asList(new Way(cityB,1), new Way(cityC, 2), new Way(cityD,3))));
                SmartCity cityA = new SmartCity("A", new ArrayList<>(Arrays.asList(new Way(cityB,2), new Way(cityC, 1), new Way(cityD,3))));
                System.out.println(cityE.equals(cityD) + "| hash1: " + cityE.hashCode() + ", hash2: " + cityD.hashCode());
                System.out.println(cityF.equals(cityA) + "| hash1: " + cityF.hashCode() + ", hash2: " + cityA.hashCode());
                System.out.println(cityA.equals(cityF) + "| hash1: " + cityA.hashCode() + ", hash2: " + cityF.hashCode());
                System.out.println(cityB.equals(cityC) + "| hash1: " + cityB.hashCode() + ", hash2: " + cityC.hashCode());

                Way test1 = new Way(new City("BB"), 1), test2 = new Way(new City("BB"), 1);
                System.out.println("Test of ways's equals: " + test1.equals(test2));


                City AA = new City("AA");
                City BB = new City("BB");
                City CC = new City("CC");
                City DD = new City("DD");

                AA.addWay(new Way(CC,2));
                AA.addWay(new Way(DD,4));

                BB.addWay(new Way(DD,5));
                BB.addWay(new Way(CC,3));
                System.out.println("ST test = " + AA.equals(BB));
                System.out.println(AA.hashCode() == BB.hashCode());*/